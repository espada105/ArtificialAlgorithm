# 정렬(Sorting)
# • 데이터를 오름차순 또는 내림차순으로 배열하는 작업임
# • ex) 숫자나 알파벳 같은 데이터를 크기나 순서대로 정리하는 과정임
# 목적
# • 데이터를 정렬하는 이유는 검색과 분석을 효율적으로 하기 위해서임.
# • 정렬된 데이터를 기반으로 검색 속도를 빠르게 하고, 통계 분석이나 
#   데이터 비교를 효율적으로 할 수 있음.

# 정렬의 필요성
# 1.검색 효율성
# • 정렬된 데이터에서 원하는 값을 찾을 때, 이진 탐색 등을 활용해 빠르게 찾을 수
# 있음
# 2.데이터 분석
# • 데이터의 패턴을 쉽게 파악하고, 최댓값이나 최솟값을 쉽게 구할 수 있음
# 3. 비교 용이성
# • 데이터를 정렬하면, 크기나 순서대로 비교하기가 쉬움

# 정렬 알고리즘 분류
# 기본 정렬
# • 버블 정렬 (Bubble Sort)
# - 인접한 두 요소를 비교하교 순서가 맞지 않으면 교환함
# - 가장 큰 값이 한 번의 반복마다 리스트 끝으로 이동함
# - 거품처럼 가장 큰 값이 떠오르는 방식
# - 반복과정

# 1. 첫 번째 패스: 배열을 처음부터 끝까지 훑으며 인접한 두 요소를 비교
# 2. 한 번의 패스를 수행하면 가장 큰 값이 배열의 끝에 위치함
# 3. 두 번째 패스: 마지막 요소를 제외하고 다시 처음부터 반복
# 4. 반복: 남은 요소들이 정렬될 때까지 계속 진행함

# • 시간복잡도: O(n²) 
# • 공간복잡도: O(1) (추가 메모리 사용 거의 없음).
# • 정렬이 필요 없는 경우에도 여전히 모든 요소를 확인함.

def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

# 전체~0번쨰인덱스 확인하는거임
# i=0, j는 0,1,2/i=1, j는 0,1/ i=2, j는 0/ 으로 두 개씩 확인
# 즉 처음에는 전체를 확인하고 점점 0번까지 범위를 줄이는거임

# arr = [5,3,4,10]
# bubble_sort(arr)
# print(arr)

# • 선택 정렬 (Selection Sort)
# 매번 가장 작은 값을 찾아서 정렬되지 않은 부분의 가장 왼쪽으로 이동시킴.
# 정렬된 부분과 정렬되지 않은 부분으로 나누어 진행함.

# 시간복잡도
# • 최악/평균/최선: O(n²)
# • (모든 경우에 대해 항상 n²만큼의 비교가 필요)
# 공간복잡도
# • O(1)
# • 추가 메모리 사용 거의 없음
# • 간단하고 직관적임.
# • 데이터가 많아질수록 비효율적.

def selectioin_sort(arr):
    n = len(arr)
    for i in range(n):
        min_idx = i
        for j in range(i+1, n):
            if arr[j] < arr[min_idx]:
                min_idx = j
            arr[i], arr [min_idx] = arr[min_idx], arr[i]

# arr = [5, 3, 8, 1]
# selectioin_sort(arr)
# print(arr)
# j번째는 i다음이라 j = i+1부터 끝까지인 n까지 확인을한다
# j번째가 i번째[min_idx]보다 작으면 min_idx는 j가 된다
# 그리고 i번째와 min_idx를 바꾼다




# • 삽입 정렬 (Insertion Sort)
# • 정렬된 부분과 비교하며 올바른 위치에 요소를 삽입함
# • 손에 카드를 하나씩 추가하면서, 올바른 자리에 끼워 넣는 방식임

# 동작 과정
# • 초기 배열: [5, 3, 8, 1]
# • 첫 번째 단계: [3, 5, 8, 1]
# • 3을 5의 앞에 삽입.
# • 두 번째 단계: [3, 5, 8, 1]
# • 8은 이미 정렬된 부분에서 올바른 위치에 있음.
# • 세 번째 단계: [1, 3, 5, 8]
# • 1을 정렬된 부분의 맨 앞에 삽입.
# • 최종 배열: [1, 3, 5, 8]

def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key

arr = [5,3,8,1]
insertion_sort(arr)
print(arr)

# 고급 정렬(성능이 좋음)
# • 병합 정렬 (Merge Sort)
# • 퀵 정렬 (Quick Sort)

